Основным назначением WinRT является упрощение языкового взаимодействия,
направленное на облегчение интегрирования компонентов, разработанных с ис-
пользованием различных языков программирования, в единое цельное прило-
жение. Но за эту простоту приходится платить, и вы должны быть готовы идти
на ряд компромиссов, основанных на доступности различных функциональных
наборов разных языков. В частности, в силу исторических причин язык C++ хоть
и поддерживает структуры, но не распознает принадлежащие им функции. В по-
нятиях C# входящая в состав структуры функция является методом экземпляра.
Следовательно, если выполняется сборка структур C#, которые требуется упаковать
в библиотеку, сделав их доступными для разработчиков, программирующих на
C++ (или на других неуправляемых языках), эти структуры не должны содержать
никаких методов экземпляров. Аналогичные ограничения действуют в структурах
и по отношению к статическим методам. Если нужно включить методы экземпляров
или статические методы, следует преобразовать вашу структуру в класс. Кроме
того, структуры не могут содержать закрытые поля, а все открытые поля должны
относиться к простым типам C#, соответствующим типам значений или строкам.
WinRT налагает и некоторые другие ограничения на те классы и структуры C#,
которые требуется сделать доступными для обычных приложений. Дополнитель-
ные сведения по этому вопросу можно будет найти в главе 12.